{"version":3,"sources":["context/PriceContext.ts","hooks/usePricer.ts","mockData.ts","utils/formatPrice.ts","components/Basket/Basket.tsx","hooks/useTotals.ts","components/Products/Products.tsx","context/PriceProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PricerContext","createContext","products","basketProducts","addBasketProduct","removeBasketProduct","usePricer","useContext","id","name","unitPrice","priceLabel","discounts","1","label","units","price","2","formatPrice","Intl","NumberFormat","currency","minimumFractionDigits","format","Basket","total","reduce","product","productsWithQuantity","productWithQuantity","productSavings","Object","entries","savings","pair","productId","Number","quantity","find","discount","remainder","discountPrice","discountTotalPrice","totalSaving","push","totalSavings","subTotal","totalAfterSavings","useTotals","length","map","index","data-testid","title","onClick","colSpan","Products","PricerProvider","children","useState","basketProductIds","setBasketProductIds","useCallback","prevProductIds","sort","copyProductIds","splice","findIndex","result","foundProduct","Provider","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f4d5098.chunk.js","sourcesContent":["/* istanbul ignore file */\n\nimport { createContext } from \"react\";\n\nimport { Product } from \"../mockData\";\n\nexport const PricerContext = createContext<Context>({\n  products: [],\n  basketProducts: [],\n  addBasketProduct: () => {},\n  removeBasketProduct: () => {},\n});\n\ntype Context = {\n  products: Array<Product>;\n  basketProducts: Array<Product>;\n  addBasketProduct: (productId: Product[\"id\"]) => void;\n  removeBasketProduct: (productId: Product[\"id\"]) => void;\n};\n","import { useContext } from \"react\";\n\nimport { PricerContext } from \"../context/PriceContext\";\n\nexport const usePricer = () => useContext(PricerContext);\n","export const products = [\n  {\n    id: 1 as const,\n    name: \"Face Masks\",\n    unitPrice: 2.5,\n    priceLabel: \"each\",\n  },\n  {\n    id: 2 as const,\n    name: \"Toilet Paper\",\n    unitPrice: 0.65,\n    priceLabel: \"per roll\",\n  },\n  {\n    id: 3 as const,\n    name: \"Hand Sanitizer\",\n    unitPrice: 3.5,\n    priceLabel: \"175ml @ £19.99 per litre\",\n  },\n];\n\nexport type Product = typeof products[number];\nexport type Discount = Partial<\n  Record<\n    Product[\"id\"],\n    {\n      label: string;\n      units: number;\n      price: number;\n    }\n  >\n>;\n\nexport const discounts: Discount = {\n  1: {\n    label: \"Two Face Masks for £4\",\n    units: 2,\n    price: 4,\n  },\n  2: {\n    label: \"Six rolls of toilet paper for the price of five\",\n    units: 6,\n    price: 3.25,\n  },\n};\n","export const formatPrice = new Intl.NumberFormat(\"en-GB\", {\n  currency: \"GBP\",\n  minimumFractionDigits: 2,\n}).format;\n","import React, { FunctionComponent } from \"react\";\n\nimport { usePricer } from \"../../hooks/usePricer\";\nimport { useTotals } from \"../../hooks/useTotals\";\nimport { formatPrice } from \"../../utils/formatPrice\";\n\nexport const Basket: FunctionComponent = () => {\n  const { basketProducts, removeBasketProduct } = usePricer();\n  const {\n    subTotal,\n    productSavings,\n    totalSavings,\n    totalAfterSavings,\n  } = useTotals();\n\n  return (\n    <table>\n      <caption>\n        Basket ({basketProducts.length} item\n        {basketProducts.length === 1 ? \"\" : \"s\"})\n      </caption>\n      <tbody>\n        {basketProducts.map((product, index) => (\n          <tr key={`${product.id}-${index}`}>\n            <td data-testid={`basket-item-${product.id}`}>{product.name}</td>\n            <td data-testid={`basket-price-${product.id}`}>\n              {formatPrice(product.unitPrice)}\n              <button\n                title=\"remove from the basket\"\n                data-testid={`remove-product-${index}`}\n                onClick={() => removeBasketProduct(product.id)}\n              >\n                X\n              </button>\n            </td>\n          </tr>\n        ))}\n        {productSavings.length > 0 && (\n          <>\n            <tr>\n              <td colSpan={2}>----------------</td>\n            </tr>\n            <tr>\n              <td>Sub-total</td>\n              <td data-testid=\"sub-total\">{formatPrice(subTotal)}</td>\n            </tr>\n            <tr>\n              <td colSpan={2}>Savings</td>\n            </tr>\n            {productSavings.map(({ label, price }, index) => (\n              <tr key={label}>\n                <td data-testid={`savings-product-${index}`}>{label}</td>\n                <td data-testid={`savings-price-${index}`}>\n                  -{formatPrice(price)}\n                </td>\n              </tr>\n            ))}\n            <tr>\n              <td colSpan={2}>----------------</td>\n            </tr>\n            <tr>\n              <td>Total savings</td>\n              <td data-testid=\"total-savings\">-{formatPrice(totalSavings)}</td>\n            </tr>\n          </>\n        )}\n        <tr>\n          <td colSpan={2}>----------------</td>\n        </tr>\n        <tr>\n          <td>Total to pay</td>\n          <td data-testid=\"total\">{formatPrice(totalAfterSavings)}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n","import { discounts, Product, products } from \"../mockData\";\nimport { usePricer } from \"./usePricer\";\n\nexport const useTotals = () => {\n  const { basketProducts } = usePricer();\n\n  const total = basketProducts.reduce((total, product) => {\n    total += product.unitPrice;\n    return total;\n  }, 0);\n\n  const productsWithQuantity = basketProducts.reduce(\n    (productWithQuantity: ProductsWithQuantity, { id }) => {\n      productWithQuantity[id] = (productWithQuantity[id] || 0) + 1;\n      return productWithQuantity;\n    },\n    {}\n  );\n\n  const productSavings = Object.entries(productsWithQuantity).reduce(\n    (savings: Savings, pair) => {\n      const productId = Number(pair[0]) as Product[\"id\"];\n      const quantity = pair[1] as number;\n      const product = products.find(({ id }) => id === productId) as Product;\n      const discount = discounts[productId];\n      if (discount) {\n        if (quantity < discount.units) {\n          return savings;\n        }\n\n        const remainder = quantity % discount.units;\n        const quantityCanBeDiscounted = quantity - remainder;\n        const discountPrice =\n          (quantityCanBeDiscounted / discount.units) * discount.price;\n        const discountTotalPrice =\n          remainder * product.unitPrice + discountPrice;\n        const totalSaving = product.unitPrice * quantity - discountTotalPrice;\n        savings.push({\n          label: discount.label,\n          price: totalSaving,\n        });\n      }\n\n      return savings;\n    },\n    []\n  );\n\n  const totalSavings = productSavings.reduce(\n    (total: number, { price }) => total + price,\n    0\n  );\n\n  return {\n    subTotal: total,\n    productSavings,\n    totalSavings,\n    totalAfterSavings: total - totalSavings,\n  };\n};\n\ntype ProductsWithQuantity = Partial<Record<Product[\"id\"], number>>;\ntype Savings = Array<{\n  label: string;\n  price: number;\n}>;\n","import React, { FunctionComponent } from \"react\";\n\nimport { usePricer } from \"../../hooks/usePricer\";\nimport { discounts } from \"../../mockData\";\nimport { formatPrice } from \"../../utils/formatPrice\";\n\nexport const Products: FunctionComponent = () => {\n  const { products, addBasketProduct } = usePricer();\n\n  return (\n    <table data-testid=\"products-list\">\n      <caption>Products</caption>\n      <tbody>\n        {products.map((product) => {\n          const discount = discounts[product.id];\n          return (\n            <tr key={product.id}>\n              <td>\n                <strong>{product.name}</strong>\n                {discount && <div>{discount.label}</div>}\n              </td>\n              <td>\n                {formatPrice(product.unitPrice)} ({product.priceLabel})\n                <button\n                  data-testid={`add-product-${product.id}`}\n                  onClick={() => {\n                    addBasketProduct(product.id);\n                  }}\n                >\n                  Add item\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FunctionComponent, useCallback, useState } from \"react\";\n\nimport { Product, products } from \"../mockData\";\nimport { PricerContext } from \"./PriceContext\";\n\nexport const PricerProvider: FunctionComponent = ({ children }) => {\n  const [basketProductIds, setBasketProductIds] = useState<Product[\"id\"][]>([]);\n\n  const addBasketProduct = useCallback((productId: Product[\"id\"]) => {\n    setBasketProductIds((prevProductIds) =>\n      [...prevProductIds, productId].sort()\n    );\n  }, []);\n\n  const removeBasketProduct = useCallback(\n    (productId: Product[\"id\"]) => {\n      const copyProductIds = [...basketProductIds];\n      copyProductIds.splice(\n        copyProductIds.findIndex((id) => id === productId),\n        1\n      );\n      setBasketProductIds(copyProductIds);\n    },\n    [basketProductIds]\n  );\n\n  const basketProducts = basketProductIds.reduce(\n    (result: Array<Product>, productId) => {\n      const foundProduct = products.find(\n        ({ id }) => id === productId\n      ) as Product;\n      result.push(foundProduct);\n      return result;\n    },\n    []\n  );\n\n  return (\n    <PricerContext.Provider\n      value={{\n        products,\n        basketProducts,\n        addBasketProduct,\n        removeBasketProduct,\n      }}\n    >\n      {children}\n    </PricerContext.Provider>\n  );\n};\n","import \"./App.css\";\n\nimport React from \"react\";\n\nimport { Basket } from \"./components/Basket/Basket\";\nimport { Products } from \"./components/Products/Products\";\nimport { PricerProvider } from \"./context/PriceProvider\";\n\nfunction App() {\n  return (\n    <PricerProvider>\n      <Products />\n      <Basket />\n    </PricerProvider>\n  );\n}\n\nexport default App;\n","/* istanbul ignore file */\n\nimport { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* istanbul ignore file */\n\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}