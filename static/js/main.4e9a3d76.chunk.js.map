{"version":3,"sources":["context/PriceContext.ts","hooks/usePricer.ts","utils/formatPrice.ts","components/Basket/BasketItems.tsx","mockData.ts","hooks/useBasket.ts","components/Basket/ BasketDivider.tsx","components/Basket/BasketSavings.tsx","components/Basket/BasketTotal.tsx","components/Basket/Basket.tsx","components/Products/Products.tsx","context/PriceProvider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PricerContext","createContext","products","basketProducts","addBasketProduct","removeBasketProduct","usePricer","useContext","formatPrice","Intl","NumberFormat","currency","minimumFractionDigits","format","BasketItems","map","product","index","data-testid","id","name","unitPrice","title","onClick","priceLabel","discounts","1","label","units","price","2","useBasket","total","reduce","productsWithQuantity","productWithQuantity","productSavings","Object","entries","savings","pair","productId","Number","quantity","find","discount","remainderQuantity","discountedPrice","discountedTotalPrice","totalSaving","push","totalSavings","subTotal","totalAfterSavings","BasketDivider","colSpan","BasketSavings","length","BasketTotal","Basket","Products","PricerProvider","children","useState","basketProductIds","setBasketProductIds","useCallback","prevProductIds","sort","copyProductIds","splice","findIndex","result","foundProduct","Provider","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e9a3d76.chunk.js","sourcesContent":["/* istanbul ignore file */\n\nimport { createContext } from \"react\";\n\nimport { Product } from \"../mockData\";\n\nexport const PricerContext = createContext<Context>({\n  products: [],\n  basketProducts: [],\n  addBasketProduct: () => {},\n  removeBasketProduct: () => {},\n});\n\ntype Context = {\n  products: Array<Product>;\n  basketProducts: Array<Product>;\n  addBasketProduct: (productId: Product[\"id\"]) => void;\n  removeBasketProduct: (productId: Product[\"id\"]) => void;\n};\n","import { useContext } from \"react\";\n\nimport { PricerContext } from \"../context/PriceContext\";\n\nexport const usePricer = () => useContext(PricerContext);\n","export const formatPrice = new Intl.NumberFormat(\"en-GB\", {\n  currency: \"GBP\",\n  minimumFractionDigits: 2,\n}).format;\n","import React, { FunctionComponent } from \"react\";\n\nimport { usePricer } from \"../../hooks/usePricer\";\nimport { formatPrice } from \"../../utils/formatPrice\";\n\nexport const BasketItems: FunctionComponent = () => {\n  const { basketProducts, removeBasketProduct } = usePricer();\n\n  return (\n    <>\n      {basketProducts.map((product, index) => (\n        <tr key={`${product.id}-${index}`}>\n          <td data-testid={`basket-item-${product.id}`}>{product.name}</td>\n          <td data-testid={`basket-price-${product.id}`}>\n            {formatPrice(product.unitPrice)}\n            <button\n              title=\"remove from the basket\"\n              data-testid={`remove-product-${index}`}\n              onClick={() => removeBasketProduct(product.id)}\n            >\n              ×\n            </button>\n          </td>\n        </tr>\n      ))}\n    </>\n  );\n};\n","export const products = [\n  {\n    id: 1 as const,\n    name: \"Face Masks\",\n    unitPrice: 2.5,\n    priceLabel: \"each\",\n  },\n  {\n    id: 2 as const,\n    name: \"Toilet Paper\",\n    unitPrice: 0.65,\n    priceLabel: \"per roll\",\n  },\n  {\n    id: 3 as const,\n    name: \"Hand Sanitizer\",\n    unitPrice: 3.5,\n    priceLabel: \"175ml @ £19.99 per litre\",\n  },\n];\n\nexport type Product = typeof products[number];\nexport type Discount = Partial<\n  Record<\n    Product[\"id\"],\n    {\n      label: string;\n      units: number;\n      price: number;\n    }\n  >\n>;\n\nexport const discounts: Discount = {\n  1: {\n    label: \"Two Face Masks for £4\",\n    units: 2,\n    price: 4,\n  },\n  2: {\n    label: \"Six rolls of toilet paper for the price of five\",\n    units: 6,\n    price: 3.25,\n  },\n};\n","import { discounts, Product, products } from \"../mockData\";\nimport { usePricer } from \"./usePricer\";\n\nexport const useBasket = () => {\n  const { basketProducts } = usePricer();\n\n  const total = basketProducts.reduce((total, product) => {\n    total += product.unitPrice;\n    return total;\n  }, 0);\n\n  const productsWithQuantity = basketProducts.reduce(\n    (productWithQuantity: ProductsWithQuantity, { id }) => {\n      productWithQuantity[id] = (productWithQuantity[id] || 0) + 1;\n      return productWithQuantity;\n    },\n    {}\n  );\n\n  const productSavings = Object.entries(productsWithQuantity).reduce(\n    (savings: Savings, pair) => {\n      const productId = Number(pair[0]) as Product[\"id\"];\n      const quantity = pair[1] as number;\n      const product = products.find(({ id }) => id === productId) as Product;\n      const discount = discounts[productId];\n\n      if (discount && quantity >= discount.units) {\n        const remainderQuantity = quantity % discount.units;\n        const quantityThatCanBeDiscounted = quantity - remainderQuantity;\n        const discountedPrice =\n          (quantityThatCanBeDiscounted / discount.units) * discount.price;\n        const discountedTotalPrice =\n          remainderQuantity * product.unitPrice + discountedPrice;\n        const totalSaving = product.unitPrice * quantity - discountedTotalPrice;\n        savings.push({\n          label: discount.label,\n          price: totalSaving,\n        });\n      }\n\n      return savings;\n    },\n    []\n  );\n\n  const totalSavings = productSavings.reduce(\n    (total: number, { price }) => total + price,\n    0\n  );\n\n  return {\n    subTotal: total,\n    productSavings,\n    totalSavings,\n    totalAfterSavings: total - totalSavings,\n  };\n};\n\ntype ProductsWithQuantity = Partial<Record<Product[\"id\"], number>>;\ntype Savings = Array<{\n  label: string;\n  price: number;\n}>;\n","import React, { FunctionComponent } from \"react\";\n\nexport const BasketDivider: FunctionComponent = () => (\n  <tr>\n    <td colSpan={2}>----------------</td>\n  </tr>\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { useBasket } from \"../../hooks/useBasket\";\nimport { formatPrice } from \"../../utils/formatPrice\";\nimport { BasketDivider } from \"./ BasketDivider\";\n\nexport const BasketSavings: FunctionComponent = () => {\n  const { subTotal, productSavings, totalSavings } = useBasket();\n\n  if (productSavings.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      <tr>\n        <td>Sub-total</td>\n        <td data-testid=\"sub-total\">{formatPrice(subTotal)}</td>\n      </tr>\n      <tr>\n        <td colSpan={2}>Savings</td>\n      </tr>\n      {productSavings.map(({ label, price }, index) => (\n        <tr key={label}>\n          <td data-testid={`savings-product-${index}`}>{label}</td>\n          <td data-testid={`savings-price-${index}`}>-{formatPrice(price)}</td>\n        </tr>\n      ))}\n      <BasketDivider />\n      <tr>\n        <td>Total savings</td>\n        <td data-testid=\"total-savings\">-{formatPrice(totalSavings)}</td>\n      </tr>\n      <BasketDivider />\n    </>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\n\nimport { useBasket } from \"../../hooks/useBasket\";\nimport { formatPrice } from \"../../utils/formatPrice\";\n\nexport const BasketTotal: FunctionComponent = () => {\n  const { totalAfterSavings } = useBasket();\n\n  return (\n    <tr>\n      <td>Total to pay</td>\n      <td data-testid=\"total\">{formatPrice(totalAfterSavings)}</td>\n    </tr>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\n\nimport { BasketItems } from \"./BasketItems\";\nimport { BasketSavings } from \"./BasketSavings\";\nimport { BasketTotal } from \"./BasketTotal\";\n\nexport const Basket: FunctionComponent = () => {\n  return (\n    <table>\n      <caption>Basket</caption>\n      <tbody>\n        <BasketItems />\n        <BasketSavings />\n        <BasketTotal />\n      </tbody>\n    </table>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\n\nimport { usePricer } from \"../../hooks/usePricer\";\nimport { discounts } from \"../../mockData\";\nimport { formatPrice } from \"../../utils/formatPrice\";\n\nexport const Products: FunctionComponent = () => {\n  const { products, addBasketProduct } = usePricer();\n\n  return (\n    <table data-testid=\"products-list\">\n      <caption>Products</caption>\n      <tbody>\n        {products.map((product) => {\n          const discount = discounts[product.id];\n          return (\n            <tr key={product.id}>\n              <td>\n                <strong>{product.name}</strong>\n                {discount && <div>{discount.label}</div>}\n              </td>\n              <td>\n                {formatPrice(product.unitPrice)} ({product.priceLabel})\n                <button\n                  data-testid={`add-product-${product.id}`}\n                  onClick={() => {\n                    addBasketProduct(product.id);\n                  }}\n                >\n                  Add item\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FunctionComponent, useCallback, useState } from \"react\";\n\nimport { Product, products } from \"../mockData\";\nimport { PricerContext } from \"./PriceContext\";\n\nexport const PricerProvider: FunctionComponent = ({ children }) => {\n  const [basketProductIds, setBasketProductIds] = useState<Product[\"id\"][]>([]);\n\n  const addBasketProduct = useCallback((productId: Product[\"id\"]) => {\n    setBasketProductIds((prevProductIds) =>\n      [...prevProductIds, productId].sort()\n    );\n  }, []);\n\n  const removeBasketProduct = useCallback(\n    (productId: Product[\"id\"]) => {\n      const copyProductIds = [...basketProductIds];\n      copyProductIds.splice(\n        copyProductIds.findIndex((id) => id === productId),\n        1\n      );\n      setBasketProductIds(copyProductIds);\n    },\n    [basketProductIds]\n  );\n\n  // no need to use useMemo here because adding or removing products\n  // will always mutate basketProductIds\n  const basketProducts = basketProductIds.reduce(\n    (result: Array<Product>, productId) => {\n      const foundProduct = products.find(\n        ({ id }) => id === productId\n      ) as Product;\n      result.push(foundProduct);\n      return result;\n    },\n    []\n  );\n\n  return (\n    <PricerContext.Provider\n      value={{\n        products,\n        basketProducts,\n        addBasketProduct,\n        removeBasketProduct,\n      }}\n    >\n      {children}\n    </PricerContext.Provider>\n  );\n};\n","import \"./App.css\";\n\nimport React from \"react\";\n\nimport { Basket } from \"./components/Basket/Basket\";\nimport { Products } from \"./components/Products/Products\";\nimport { PricerProvider } from \"./context/PriceProvider\";\n\nfunction App() {\n  return (\n    <PricerProvider>\n      <Products />\n      <Basket />\n    </PricerProvider>\n  );\n}\n\nexport default App;\n","/* istanbul ignore file */\n\nimport { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* istanbul ignore file */\n\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}